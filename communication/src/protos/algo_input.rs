// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `algo_input.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:Team)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Team {
    // message fields
    // @@protoc_insertion_point(field:Team.unique_id)
    pub unique_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:Team.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Team {
    fn default() -> &'a Team {
        <Team as ::protobuf::Message>::default_instance()
    }
}

impl Team {
    pub fn new() -> Team {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unique_id",
            |m: &Team| { &m.unique_id },
            |m: &mut Team| { &mut m.unique_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Team>(
            "Team",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Team {
    const NAME: &'static str = "Team";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.unique_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.unique_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.unique_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.unique_id != 0 {
            os.write_uint32(1, self.unique_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Team {
        Team::new()
    }

    fn clear(&mut self) {
        self.unique_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Team {
        static instance: Team = Team {
            unique_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Team {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Team").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Team {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Team {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:PlayableTeamCollection)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlayableTeamCollection {
    // message fields
    // @@protoc_insertion_point(field:PlayableTeamCollection.teams)
    pub teams: ::std::vec::Vec<Team>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayableTeamCollection.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayableTeamCollection {
    fn default() -> &'a PlayableTeamCollection {
        <PlayableTeamCollection as ::protobuf::Message>::default_instance()
    }
}

impl PlayableTeamCollection {
    pub fn new() -> PlayableTeamCollection {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "teams",
            |m: &PlayableTeamCollection| { &m.teams },
            |m: &mut PlayableTeamCollection| { &mut m.teams },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayableTeamCollection>(
            "PlayableTeamCollection",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayableTeamCollection {
    const NAME: &'static str = "PlayableTeamCollection";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.teams.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.teams {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.teams {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayableTeamCollection {
        PlayableTeamCollection::new()
    }

    fn clear(&mut self) {
        self.teams.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayableTeamCollection {
        static instance: PlayableTeamCollection = PlayableTeamCollection {
            teams: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayableTeamCollection {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayableTeamCollection").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayableTeamCollection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayableTeamCollection {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:TimeSlot)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TimeSlot {
    // message fields
    // @@protoc_insertion_point(field:TimeSlot.start)
    pub start: i64,
    // @@protoc_insertion_point(field:TimeSlot.end)
    pub end: i64,
    // @@protoc_insertion_point(field:TimeSlot.concurrency)
    pub concurrency: u32,
    // special fields
    // @@protoc_insertion_point(special_field:TimeSlot.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TimeSlot {
    fn default() -> &'a TimeSlot {
        <TimeSlot as ::protobuf::Message>::default_instance()
    }
}

impl TimeSlot {
    pub fn new() -> TimeSlot {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start",
            |m: &TimeSlot| { &m.start },
            |m: &mut TimeSlot| { &mut m.start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "end",
            |m: &TimeSlot| { &m.end },
            |m: &mut TimeSlot| { &mut m.end },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "concurrency",
            |m: &TimeSlot| { &m.concurrency },
            |m: &mut TimeSlot| { &mut m.concurrency },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TimeSlot>(
            "TimeSlot",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TimeSlot {
    const NAME: &'static str = "TimeSlot";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.start = is.read_int64()?;
                },
                16 => {
                    self.end = is.read_int64()?;
                },
                24 => {
                    self.concurrency = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.start != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.start);
        }
        if self.end != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.end);
        }
        if self.concurrency != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.concurrency);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.start != 0 {
            os.write_int64(1, self.start)?;
        }
        if self.end != 0 {
            os.write_int64(2, self.end)?;
        }
        if self.concurrency != 0 {
            os.write_uint32(3, self.concurrency)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TimeSlot {
        TimeSlot::new()
    }

    fn clear(&mut self) {
        self.start = 0;
        self.end = 0;
        self.concurrency = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TimeSlot {
        static instance: TimeSlot = TimeSlot {
            start: 0,
            end: 0,
            concurrency: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TimeSlot {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TimeSlot").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TimeSlot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeSlot {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Field)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Field {
    // message fields
    // @@protoc_insertion_point(field:Field.unique_id)
    pub unique_id: u32,
    // @@protoc_insertion_point(field:Field.time_slots)
    pub time_slots: ::std::vec::Vec<TimeSlot>,
    // special fields
    // @@protoc_insertion_point(special_field:Field.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Field {
    fn default() -> &'a Field {
        <Field as ::protobuf::Message>::default_instance()
    }
}

impl Field {
    pub fn new() -> Field {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unique_id",
            |m: &Field| { &m.unique_id },
            |m: &mut Field| { &mut m.unique_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "time_slots",
            |m: &Field| { &m.time_slots },
            |m: &mut Field| { &mut m.time_slots },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Field>(
            "Field",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Field {
    const NAME: &'static str = "Field";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.unique_id = is.read_uint32()?;
                },
                18 => {
                    self.time_slots.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.unique_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.unique_id);
        }
        for value in &self.time_slots {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.unique_id != 0 {
            os.write_uint32(1, self.unique_id)?;
        }
        for v in &self.time_slots {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Field {
        Field::new()
    }

    fn clear(&mut self) {
        self.unique_id = 0;
        self.time_slots.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Field {
        static instance: Field = Field {
            unique_id: 0,
            time_slots: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Field {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Field").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Field {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ScheduledInput)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ScheduledInput {
    // message fields
    // @@protoc_insertion_point(field:ScheduledInput.team_groups)
    pub team_groups: ::std::vec::Vec<PlayableTeamCollection>,
    // @@protoc_insertion_point(field:ScheduledInput.fields)
    pub fields: ::std::vec::Vec<Field>,
    // special fields
    // @@protoc_insertion_point(special_field:ScheduledInput.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ScheduledInput {
    fn default() -> &'a ScheduledInput {
        <ScheduledInput as ::protobuf::Message>::default_instance()
    }
}

impl ScheduledInput {
    pub fn new() -> ScheduledInput {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "team_groups",
            |m: &ScheduledInput| { &m.team_groups },
            |m: &mut ScheduledInput| { &mut m.team_groups },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fields",
            |m: &ScheduledInput| { &m.fields },
            |m: &mut ScheduledInput| { &mut m.fields },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ScheduledInput>(
            "ScheduledInput",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ScheduledInput {
    const NAME: &'static str = "ScheduledInput";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.team_groups.push(is.read_message()?);
                },
                18 => {
                    self.fields.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.team_groups {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.fields {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.team_groups {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.fields {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ScheduledInput {
        ScheduledInput::new()
    }

    fn clear(&mut self) {
        self.team_groups.clear();
        self.fields.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ScheduledInput {
        static instance: ScheduledInput = ScheduledInput {
            team_groups: ::std::vec::Vec::new(),
            fields: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ScheduledInput {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ScheduledInput").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ScheduledInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScheduledInput {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10algo_input.proto\"#\n\x04Team\x12\x1b\n\tunique_id\x18\x01\x20\x01\
    (\rR\x08uniqueId\"5\n\x16PlayableTeamCollection\x12\x1b\n\x05teams\x18\
    \x01\x20\x03(\x0b2\x05.TeamR\x05teams\"T\n\x08TimeSlot\x12\x14\n\x05star\
    t\x18\x01\x20\x01(\x03R\x05start\x12\x10\n\x03end\x18\x02\x20\x01(\x03R\
    \x03end\x12\x20\n\x0bconcurrency\x18\x03\x20\x01(\rR\x0bconcurrency\"N\n\
    \x05Field\x12\x1b\n\tunique_id\x18\x01\x20\x01(\rR\x08uniqueId\x12(\n\nt\
    ime_slots\x18\x02\x20\x03(\x0b2\t.TimeSlotR\ttimeSlots\"j\n\x0eScheduled\
    Input\x128\n\x0bteam_groups\x18\x01\x20\x03(\x0b2\x17.PlayableTeamCollec\
    tionR\nteamGroups\x12\x1e\n\x06fields\x18\x02\x20\x03(\x0b2\x06.FieldR\
    \x06fieldsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Team::generated_message_descriptor_data());
            messages.push(PlayableTeamCollection::generated_message_descriptor_data());
            messages.push(TimeSlot::generated_message_descriptor_data());
            messages.push(Field::generated_message_descriptor_data());
            messages.push(ScheduledInput::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
