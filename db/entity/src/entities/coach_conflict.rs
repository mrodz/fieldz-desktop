//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, PartialOrd, Ord,
)]
#[sea_orm(table_name = "coach_conflict")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub region: i32,
    pub coach_name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::coach_conflict_team_join::Entity")]
    CoachConflictTeamJoin,
    #[sea_orm(
        belongs_to = "super::region::Entity",
        from = "Column::Region",
        to = "super::region::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Region,
}

impl Related<super::coach_conflict_team_join::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CoachConflictTeamJoin.def()
    }
}

impl Related<super::region::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Region.def()
    }
}

impl Related<super::team::Entity> for Entity {
    fn to() -> RelationDef {
        super::coach_conflict_team_join::Relation::Team.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::coach_conflict_team_join::Relation::CoachConflict
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
