//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, PartialOrd, Ord,
)]
#[sea_orm(table_name = "reservation_type")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub description: Option<String>,
    pub color: String,
    pub default_sizing: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::reservation_type_field_size_join::Entity")]
    ReservationTypeFieldSizeJoin,
    #[sea_orm(has_many = "super::reservation_type_time_slot_join::Entity")]
    ReservationTypeTimeSlotJoin,
    #[sea_orm(has_many = "super::target::Entity")]
    Target,
}

impl Related<super::reservation_type_field_size_join::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReservationTypeFieldSizeJoin.def()
    }
}

impl Related<super::reservation_type_time_slot_join::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReservationTypeTimeSlotJoin.def()
    }
}

impl Related<super::target::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Target.def()
    }
}

impl Related<super::field::Entity> for Entity {
    fn to() -> RelationDef {
        super::reservation_type_field_size_join::Relation::Field.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::reservation_type_field_size_join::Relation::ReservationType
                .def()
                .rev(),
        )
    }
}

impl Related<super::time_slot::Entity> for Entity {
    fn to() -> RelationDef {
        super::reservation_type_time_slot_join::Relation::TimeSlot.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::reservation_type_time_slot_join::Relation::ReservationType
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
