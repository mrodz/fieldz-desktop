//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, PartialOrd, Ord,
)]
#[sea_orm(table_name = "target")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::target_group_join::Entity")]
    TargetGroupJoin,
}

impl Related<super::target_group_join::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TargetGroupJoin.def()
    }
}

impl Related<super::team_group::Entity> for Entity {
    fn to() -> RelationDef {
        super::target_group_join::Relation::TeamGroup.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::target_group_join::Relation::Target.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
