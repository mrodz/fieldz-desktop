//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "team")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub region_owner: i32,
    pub team_group: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::region::Entity",
        from = "Column::RegionOwner",
        to = "super::region::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Region,
    #[sea_orm(
        belongs_to = "super::team_group::Entity",
        from = "Column::TeamGroup",
        to = "super::team_group::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TeamGroup,
}

impl Related<super::region::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Region.def()
    }
}

impl Related<super::team_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamGroup.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
