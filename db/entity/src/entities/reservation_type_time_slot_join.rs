//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, PartialOrd, Ord,
)]
#[sea_orm(table_name = "reservation_type_time_slot_join")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub time_slot: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub reservation_type: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::reservation_type::Entity",
        from = "Column::ReservationType",
        to = "super::reservation_type::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ReservationType,
    #[sea_orm(
        belongs_to = "super::time_slot::Entity",
        from = "Column::TimeSlot",
        to = "super::time_slot::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TimeSlot,
}

impl Related<super::reservation_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReservationType.def()
    }
}

impl Related<super::time_slot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TimeSlot.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
